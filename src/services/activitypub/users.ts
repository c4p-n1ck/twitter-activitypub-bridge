import utils from '@/utils'
import config from '@/config'
import activitypub from '@/services/activitypub'
import twitter from '@/services/twitter'
import { ITwitterUserProfile } from '@/database/types'

export async function user(user: ITwitterUserProfile) {
    let keypair = await activitypub.utils.getUserKeypair(user.id_str)
    if (!keypair) return null

    const attachments = []

    if (user.url) attachments.push(utils.jsonld.createAttachment('Link', twitter.replaceRawLinks(user.url, user.entities)))
    attachments.push(utils.jsonld.createAttachment('TwitterID', `<a href="https://twitter.com/${user.screen_name}">${user.screen_name}</a>`))
    attachments.push(utils.jsonld.createAttachment('Notification', `This user generated by <a href="${config.url}">${config.name}/${config.version}</a>`))

    const profile = {
        '@context': 'https://www.w3.org/ns/activitystreams',
        id: `${config.url}/users/${user.id_str}`,
        type: 'Person',
        following: `${config.url}/users/${user.id_str}/following`,
        followers: `${config.url}/users/${user.id_str}/followers`,
        inbox: `${config.url}/users/${user.id_str}/inbox`,
        outbox: `${config.url}/users/${user.id_str}/outbox`,
        sharedInbox: `${config.url}/inbox`,
        endpoints: {
            sharedInbox: `${config.url}/inbox`
        },
        preferredUsername: user.screen_name,
        name: user.name,
        summary: twitter.replaceRawLinks(user.description, user.entities),
        manuallyApprovesFollowers: user.protected,
        attachment: attachments,
        url: `https://twitter.com/${user.screen_name}`,
        icon: utils.jsonld.createImage(user.profile_image_url_https.replace('_normal', '')),
        image: utils.jsonld.createImage(user.profile_banner_url),
        publicKey: {
            id: `${config.url}/users/${user.id_str}#main-key`,
            owner: `${config.url}/users/${user.id_str}`,
            publicKeyPem: keypair.publicKey
        }
    } as any

    if (user.location) profile['vcard:Address'] = user.location

    return profile
}